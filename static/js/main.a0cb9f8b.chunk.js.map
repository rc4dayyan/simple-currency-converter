{"version":3,"sources":["contexts/GeneralContext.js","components/CurrencyOptions.js","components/CurrencyConverter.js","App.js","serviceWorker.js","index.js"],"names":["GeneralContext","createContext","GeneralContextProvider","props","useState","exchangeRate","setExchangeRate","searchExchangeRate","fromnya","tonya","axios","get","then","res","data","rates","catch","error","console","log","useEffect","Provider","value","children","CurrencyOptions","CurrencyConverter","country","useContext","fromCurrency","setFromCurrency","toCurrency","setToCurrency","fromValue","setFromValue","toValue","setToValue","nilaiExchange","useCallback","rate","getSymbol","currency","cur","find","el","nilai","symbol","Container","Segment","placeholder","Header","as","Content","Subheader","Date","toLocaleString","Grid","verticalAlign","Row","Column","width","isMobile","className","Dropdown","fluid","search","selection","onChange","e","from","options","type","amount","target","style","Button","circular","color","icon","Icon","name","onClick","temp","to","toFixed","displayType","thousandSeparator","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a0cb9f8b.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\nexport const GeneralContext = createContext();\n\nconst GeneralContextProvider = (props) => {\n\n    const [ exchangeRate, setExchangeRate ] = useState(1);\n\n    const searchExchangeRate = (fromnya='USD', tonya='IDR') => {        \n        axios.get('https://api.exchangeratesapi.io/latest?base='+fromnya+'&symbols='+tonya)\n            .then(res => {\n                \n                // console.log('exchange:',res.data.rates);\n                setExchangeRate(res.data.rates[tonya]);\n\n            })\n            .catch(error => {\n                console.log('Sorry! we are under maintenance [exchange rate]', error);\n                \n            });\n    }\n\n    useEffect(() => {\n        searchExchangeRate();\n    }, [])\n    return (  \n        <GeneralContext.Provider value={{ exchangeRate, searchExchangeRate }}>\n            {props.children}\n        </GeneralContext.Provider>\n    );\n}\n \nexport default GeneralContextProvider;","export function CurrencyOptions() {\n    return [\n        {\n            \"text\": \"EUR - Euro\",\n            \"key\": \"eu\",\n            \"value\": \"EUR\",\n            \"flag\": \"eu\",\n            \"symbol\": \"€\"\n        },\n        {\n            \"text\": \"GBP - British Pound Sterling\",\n            \"key\": \"gb\",\n            \"value\": \"GBP\",\n            \"flag\": \"gb\",\n            \"symbol\": \"£\"\n        },\n        {\n            \"text\": \"AUD - Australian Dollar\",\n            \"key\": \"au\",\n            \"value\": \"AUD\",\n            \"flag\": \"au\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"NZD - New Zealand Dollar\",\n            \"key\": \"nz\",\n            \"value\": \"NZD\",\n            \"flag\": \"nz\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"USD - United States Dollar\",\n            \"key\": \"us\",\n            \"value\": \"USD\",\n            \"flag\": \"us\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"CAD - Canadian Dollar\",\n            \"key\": \"ca\",\n            \"value\": \"CAD\",\n            \"flag\": \"ca\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"CHF - Swiss Franc\",\n            \"key\": \"ch\",\n            \"value\": \"CHF\",\n            \"flag\": \"ch\",\n            \"symbol\": \"₣\"\n        },\n        {\n            \"text\": \"JPY - Japanese Yen\",\n            \"key\": \"jp\",\n            \"value\": \"JPY\",\n            \"flag\": \"jp\",\n            \"symbol\": \"¥\"\n        },\n        {\n            \"text\": \"BGN - Bulgarian Lev\",\n            \"key\": \"bg\",\n            \"value\": \"BGN\",\n            \"flag\": \"bg\",\n            \"symbol\": \"лв\"\n        },\n        {\n            \"text\": \"ILS - Israeli New Sheqel\",\n            \"key\": \"il\",\n            \"value\": \"ILS\",\n            \"flag\": \"il\",\n            \"symbol\": \"₪\"\n        },\n        {\n            \"text\": \"RUB - Russian Ruble\",\n            \"key\": \"ru\",\n            \"value\": \"RUB\",\n            \"flag\": \"ru\",\n            \"symbol\": \"₽\"\n        },\n        {\n            \"text\": \"PHP - Philippine Peso\",\n            \"key\": \"ph\",\n            \"value\": \"PHP\",\n            \"flag\": \"ph\",\n            \"symbol\": \"₱\"\n        },\n        {\n            \"text\": \"ZAR - South African Rand\",\n            \"key\": \"za\",\n            \"value\": \"ZAR\",\n            \"flag\": \"za\",\n            \"symbol\": \"R\"\n        },\n        {\n            \"text\": \"TRY - Turkish Lira\",\n            \"key\": \"tr\",\n            \"value\": \"TRY\",\n            \"flag\": \"tr\",\n            \"symbol\": \"₤\"\n        },\n        {\n            \"text\": \"HKD - Hong Kong Dollar\",\n            \"key\": \"hk\",\n            \"value\": \"HKD\",\n            \"flag\": \"hk\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"MYR - Malaysian Ringgit\",\n            \"key\": \"my\",\n            \"value\": \"MYR\",\n            \"flag\": \"my\",\n            \"symbol\": \"RM\"\n        },\n        {\n            \"text\": \"THB - Thai Baht\",\n            \"key\": \"th\",\n            \"value\": \"THB\",\n            \"flag\": \"th\",\n            \"symbol\": \"฿\"\n        },\n        {\n            \"text\": \"HRK - Croatian Kuna\",\n            \"key\": \"hr\",\n            \"value\": \"HRK\",\n            \"flag\": \"hr\",\n            \"symbol\": \"Kn\"\n        },\n        {\n            \"text\": \"NOK - Norwegian Krone\",\n            \"key\": \"no\",\n            \"value\": \"NOK\",\n            \"flag\": \"no\",\n            \"symbol\": \"kr\"\n        },\n        {\n            \"text\": \"IDR - Indonesian Rupiah\",\n            \"key\": \"id\",\n            \"value\": \"IDR\",\n            \"flag\": \"id\",\n            \"symbol\": \"Rp\"\n        },\n        {\n            \"text\": \"DKK - Danish Krone\",\n            \"key\": \"dk\",\n            \"value\": \"DKK\",\n            \"flag\": \"dk\",\n            \"symbol\": \"kr\"\n        },\n        {\n            \"text\": \"CZK - Czech Republic Koruna\",\n            \"key\": \"cz\",\n            \"value\": \"CZK\",\n            \"flag\": \"cz\",\n            \"symbol\": \"Kč\"\n        },\n        {\n            \"text\": \"HUF - Hungarian Forint\",\n            \"key\": \"hu\",\n            \"value\": \"HUF\",\n            \"flag\": \"hu\",\n            \"symbol\": \"Ft\"\n        },\n        {\n            \"text\": \"MXN - Mexican Peso\",\n            \"key\": \"mx\",\n            \"value\": \"MXN\",\n            \"flag\": \"mx\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"KRW - South Korean Won\",\n            \"key\": \"kr\",\n            \"value\": \"KRW\",\n            \"flag\": \"kr\",\n            \"symbol\": \"₩\"\n        },\n        {\n            \"text\": \"ISK - Icelandic Kr\\u00f3na\",\n            \"key\": \"is\",\n            \"value\": \"ISK\",\n            \"flag\": \"is\",\n            \"symbol\": \"Kr\"\n        },\n        {\n            \"text\": \"SGD - Singapore Dollar\",\n            \"key\": \"sg\",\n            \"value\": \"SGD\",\n            \"flag\": \"sg\",\n            \"symbol\": \"$\"\n        },\n        {\n            \"text\": \"BRL - Brazilian Real\",\n            \"key\": \"br\",\n            \"value\": \"BRL\",\n            \"flag\": \"br\",\n            \"symbol\": \"R$\"\n        },\n        {\n            \"text\": \"PLN - Polish Zloty\",\n            \"key\": \"pl\",\n            \"value\": \"PLN\",\n            \"flag\": \"pl\",\n            \"symbol\": \"zł\"\n        },\n        {\n            \"text\": \"INR - Indian Rupee\",\n            \"key\": \"in\",\n            \"value\": \"INR\",\n            \"flag\": \"in\",\n            \"symbol\": \"₹\"\n        },\n        {\n            \"text\": \"RON - Romanian Leu\",\n            \"key\": \"ro\",\n            \"value\": \"RON\",\n            \"flag\": \"ro\",\n            \"symbol\": \"L\"\n        },\n        {\n            \"text\": \"CNY - Chinese Yuan\",\n            \"key\": \"cn\",\n            \"value\": \"CNY\",\n            \"flag\": \"cn\",\n            \"symbol\": \"¥\"\n        },\n        {\n            \"text\": \"SEK - Swedish Krona\",\n            \"key\": \"se\",\n            \"value\": \"SEK\",\n            \"flag\": \"se\",\n            \"symbol\": \"kr\"\n        }\n    ];\n}","import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport { GeneralContext } from '../contexts/GeneralContext';\nimport NumberFormat from 'react-number-format';\nimport {\n    Container, \n    Grid, \n    Icon, \n    Segment, \n    Dropdown, \n    Button, \n    Header} from 'semantic-ui-react';\nimport { isMobile } from \"react-device-detect\";\nimport { CurrencyOptions } from './CurrencyOptions';\n\nconst CurrencyConverter = () => {\n\n    const [ country ] = useState(CurrencyOptions);\n\n    const { exchangeRate, searchExchangeRate } = useContext(GeneralContext);\n\n    const [ fromCurrency, setFromCurrency ] = useState('USD');\n\n    const [ toCurrency, setToCurrency ] = useState('IDR');\n\n    const [ fromValue, setFromValue ] = useState(1);\n\n    const [ toValue, setToValue ] = useState(1);\n\n    const changeFromCurrency = (from) => {\n        setFromCurrency(from);\n        searchExchangeRate(from, toCurrency);\n    }\n\n    const changeToCurrency = (to) => {\n        setToCurrency(to);\n        searchExchangeRate(fromCurrency, to);\n    }\n\n    const nilaiExchange = useCallback(\n        (rate = fromValue) => {\n        let nilai = 0;\n        nilai = rate*exchangeRate;\n\n        return nilai;\n    }, [exchangeRate, fromValue])\n\n    const getSymbol = (currency) => {\n        let cur = country.find(el => {  \n            let nilai = '';\n            if(el.value === currency)  {\n                nilai = el;\n            }\n            return nilai\n        });\n        return (cur !== '-') ? cur.symbol : '';\n    }\n\n    const switchCurrency = () => {\n        let temp = fromCurrency;\n        setFromCurrency(toCurrency);\n        setToCurrency(temp);\n        searchExchangeRate(toCurrency, fromCurrency);\n    }\n\n    useEffect(() => {\n        setToValue(nilaiExchange());\n    },[exchangeRate, nilaiExchange])\n\n    return (\n        <Container>\n            <Segment placeholder>\n                <Header as='h2'>\n                    <Header.Content>\n                        Currency Converter\n                    <Header.Subheader>{new Date().toLocaleString()}</Header.Subheader>\n                    </Header.Content>\n                </Header>\n                <Grid verticalAlign='middle'>\n                    <Grid.Row>\n                        <Grid.Column width={ isMobile ? 16 : 7 }>\n                            <div className=\"label\">\n                                <p>From:</p>\n                            </div>\n                            <div>\n                                <Dropdown\n                                    placeholder='Select Country'\n                                    fluid\n                                    search\n                                    selection\n                                    value={fromCurrency}\n                                    onChange={(e, data)=>{return changeFromCurrency(data.value)}}\n                                    options={country}\n                                />\n                            </div>\n                            <div className=\"text-exchange\">\n                                <h1>\n                                    <span className=\"cur-symbol\">{getSymbol(fromCurrency)}</span>\n                                    <input type=\"text\" placeholder='0' value={fromValue} onChange={e => {\n                                        const amount = e.target.value;\n                                        setFromValue(amount);\n                                        setToValue(nilaiExchange(amount));\n                                    }} className=\"no-border\" style={{width:'60%'}} />\n                                </h1>\n                            </div>\n                            \n                        </Grid.Column>\n                        \n                        <Grid.Column width={ isMobile ? 16 : 2 }>\n                            <Button circular className=\"huge\" color='twitter' icon={<Icon name='exchange' />} onClick={switchCurrency} />\n                        </Grid.Column>\n                        \n                        <Grid.Column width={ isMobile ? 16 : 7 }>\n                            <div className=\"label\">\n                                <p>To:</p>\n                            </div>\n                            <div>\n                                <Dropdown\n                                    placeholder='Select Country'\n                                    fluid\n                                    search\n                                    selection\n                                    value={toCurrency}\n                                    onChange={(e, data)=>{return changeToCurrency(data.value)}}\n                                    options={country}\n                                />              \n                            </div>\n                            <div className=\"text-exchange\">\n                                <h1>\n                                    <span className=\"cur-symbol\">{getSymbol(toCurrency)}</span>\n                                    <NumberFormat value={toValue.toFixed(2)} displayType={'text'} thousandSeparator={true} />\n                                </h1>\n                            </div>\n                            \n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        </Container>\n    );\n}\n \nexport default CurrencyConverter;","import React from 'react';\nimport './App.css';\nimport CurrencyConverter from './components/CurrencyConverter';\nimport GeneralContextProvider from './contexts/GeneralContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GeneralContextProvider>\n        <CurrencyConverter />\n      </GeneralContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}